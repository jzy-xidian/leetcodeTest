package 买卖股票的最佳时机含手续费714;

public class GupiaoWithShouxufei {
}

class Solution {
    //最大利润要考虑除掉手续费
    //在122题中没有手续问题，直接采用动态规划计算最大买入卖出利润
    //买入肯定是亏的，卖出才能赚

    //「手续费」使得本题无法使用贪心算法解决，
    // 这是因为第 122 题中的贪心策略可以等价于仅考虑相邻两天依次买入卖出的情况，
    // 而本题中每一笔交易都有固定的手续费，即交易次数越多，手续费总和越大，
    // 因此将每一笔「长线」交易拆分成若干笔「短线」交易来等价考虑，
    // 显然是不合理的。因此，我们可以使用常规的动态规划方法解决本题。
    //

    //考虑到「不能同时参与多笔交易」，
    // 因此每天交易结束后只可能存在手里有一支股票或者没有股票的状态。

    //定义状态 dp[i][0] 表示第 i 天交易完后手里没有股票的最大利润，
    // dp[i][1] 表示第 i 天交易完后手里持有一支股票的最大利润（i从 0 开始）
    //

    public int maxProfit(int[] prices, int fee) {

        int n = prices.length;
        int[][] dp = new int[n][2];
        dp[0][0] = 0;
        dp[0][1] = -prices[0];

        for (int i = 1; i < n; i++){
            dp[i][0] = Math.max(dp[i-1][0],dp[i-1][1] + prices[i] - fee);
            dp[i][1] = Math.max(dp[i-1][1],dp[i-1][0] - prices[i]);
        }

        return dp[n - 1][0];

    }
}